import { NextRequest, NextResponse } from 'next/server'
import fs from 'fs'
import path from 'path'

export async function POST(request: NextRequest) {
  try {
    const { html, projectName, userToken } = await request.json()

    if (!html || !projectName) {
      return NextResponse.json(
        { error: 'Missing required fields: html and projectName' },
        { status: 400 }
      )
    }

    // Always use free hosting for now (Vercel deployment coming soon)
    return deployToVercelDemo(html, projectName)

    // TODO: Implement Vercel deployment when premium features are ready
    // Deploy to user's Vercel account
    // const deployment = await deployToUserVercel(html, projectName, userToken)
    //
    // return NextResponse.json({
    //   success: true,
    //   url: deployment.url,
    //   deploymentId: deployment.id,
    //   status: deployment.status
    // })

  } catch (error) {
    console.error('Deployment error:', error)
    return NextResponse.json(
      { error: 'Deployment failed', details: error instanceof Error ? error.message : 'Unknown error' },
      { status: 500 }
    )
  }
}

// Deploy to user's Vercel account using their token
async function deployToUserVercel(html: string, projectName: string, userToken: string) {
  const response = await fetch('https://api.vercel.com/v13/deployments', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${userToken}`,
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      name: projectName.toLowerCase().replace(/[^a-z0-9-]/g, '-'),
      files: [
        {
          file: 'index.html',
          data: html
        },
        {
          file: 'package.json',
          data: JSON.stringify({
            name: projectName.toLowerCase().replace(/[^a-z0-9-]/g, '-'),
            version: '1.0.0',
            scripts: {
              build: 'echo "Static site, no build needed"'
            }
          })
        }
      ],
      projectSettings: {
        framework: 'static',
        buildCommand: null,
        outputDirectory: null
      },
      target: 'production'
    })
  })

  if (!response.ok) {
    const error = await response.json()
    throw new Error(`Vercel deployment failed: ${error.error?.message || 'Unknown error'}`)
  }

  const deployment = await response.json()
  return {
    id: deployment.id,
    url: deployment.url,
    status: deployment.readyState || 'BUILDING'
  }
}

// Demo deployment method using GitHub Gist + GitHub Pages
async function deployToVercelDemo(html: string, projectName: string) {
  try {
    // 1. Try GitHub Gist deployment (works without authentication for public gists)
    const gistResult = await deployToGitHubGist(html, projectName)
    if (gistResult.success) {
      return NextResponse.json(gistResult)
    }
  } catch (error) {
    console.log('GitHub Gist failed, using fallback hosting...')
  }

  // 2. Fallback to our own hosting with a public URL
  try {
    const deploymentId = `demo-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`

    // Create demo sites directory if it doesn't exist
    const demoDir = path.join(process.cwd(), 'public', 'demo-sites')
    if (!fs.existsSync(demoDir)) {
      fs.mkdirSync(demoDir, { recursive: true })
    }

    // Save the HTML file
    const filePath = path.join(demoDir, `${deploymentId}.html`)
    fs.writeFileSync(filePath, html, 'utf8')

    // Use a public URL that works from anywhere (not localhost)
    const publicUrl = process.env.VERCEL_URL
      ? `https://${process.env.VERCEL_URL}/api/demo-site/${deploymentId}`
      : process.env.NEXT_PUBLIC_BASE_URL
      ? `${process.env.NEXT_PUBLIC_BASE_URL}/api/demo-site/${deploymentId}`
      : `https://ai-website-builder-pro.vercel.app/api/demo-site/${deploymentId}`

    return NextResponse.json({
      success: true,
      url: publicUrl,
      deploymentId: deploymentId,
      status: 'READY',
      isDemo: true,
      provider: 'Free Demo Hosting',
      message: 'ðŸš€ Your website is now live and accessible from anywhere! Share this URL with anyone.'
    })
  } catch (error) {
    console.error('Demo deployment error:', error)
    return NextResponse.json({
      success: false,
      error: 'Failed to create demo deployment'
    }, { status: 500 })
  }
}

// Deploy to GitHub Gist (Free, public)
async function deployToGitHubGist(html: string, projectName: string) {
  try {
    // Create a public gist with the HTML content
    const gistData = {
      description: `${projectName} - Generated by AI Website Builder`,
      public: true,
      files: {
        'index.html': {
          content: html
        }
      }
    }

    // Create the gist (no authentication needed for public gists)
    const response = await fetch('https://api.github.com/gists', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'User-Agent': 'AI-Website-Builder'
      },
      body: JSON.stringify(gistData)
    })

    if (!response.ok) {
      throw new Error(`GitHub Gist creation failed: ${response.status}`)
    }

    const result = await response.json()

    // Use a service like htmlpreview.github.io to serve the HTML
    const previewUrl = `https://htmlpreview.github.io/?${result.files['index.html'].raw_url}`

    return {
      success: true,
      url: previewUrl,
      deploymentId: result.id,
      status: 'READY',
      provider: 'GitHub Gist + HTML Preview',
      message: 'ðŸš€ Your website is now live via GitHub Gist! Accessible from anywhere.',
      gistUrl: result.html_url
    }
  } catch (error) {
    console.error('GitHub Gist deployment failed:', error)
    throw error
  }
}

// Get deployment status
export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url)
    const deploymentId = searchParams.get('deploymentId')
    const userToken = searchParams.get('userToken')

    if (!deploymentId || !userToken) {
      return NextResponse.json(
        { error: 'Missing deploymentId or userToken' },
        { status: 400 }
      )
    }

    const response = await fetch(`https://api.vercel.com/v13/deployments/${deploymentId}`, {
      headers: {
        'Authorization': `Bearer ${userToken}`
      }
    })

    if (!response.ok) {
      throw new Error('Failed to get deployment status')
    }

    const deployment = await response.json()
    
    return NextResponse.json({
      success: true,
      status: deployment.readyState,
      url: deployment.url,
      createdAt: deployment.createdAt
    })

  } catch (error) {
    console.error('Status check error:', error)
    return NextResponse.json(
      { error: 'Failed to check deployment status' },
      { status: 500 }
    )
  }
}
